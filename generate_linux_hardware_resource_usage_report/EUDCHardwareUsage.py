import re
import xlsxwriter
from datetime import datetime
import os

# Open the output file generated by Ansible.
# Find the valid data we need to use, format the data to list, the list data will be used later
today = datetime.today().strftime('%Y%m%d')
envs = ["PROD", "DMZ", "UAT", "TEST", "FW", "DR"]

# Check if the outfile from Ansible is exist or not
for env in envs:
    outputFile = "EUDataCenterDiskCapacity_" + env + "." + today + ".output"
    if os.path.isfile("./" + outputFile):
        continue
    else:
        raise Exception(outputFile + " is not exist")

# Define the function to display the disk usage information
def findstrtolist(env, strs):
    ansibleOutputFile = "EUDataCenterDiskCapacity_" + env + "." + today + ".output"
    f = open(ansibleOutputFile, "r")
    my_regex = r'^\s+"' + re.escape(strs) + r'.*"'
    for i in f.readlines():
        if re.search(my_regex, i):
            result = i.strip().strip('\"').split()
            if result.__len__() >= 7:
                result[4], result[6] = result[6], result[4]
    f.close()
    return result


prodLocal = findstrtolist("PROD", "/dev/xvda2")
print(prodLocal)
prodLxd = findstrtolist("PROD", "lxd")
print(prodLxd)
prodShare = findstrtolist("PROD", "shared_prod")
print(prodShare)
prodMemory = findstrtolist("PROD", "Memory_Usage")
print(prodMemory)
prodCpu = findstrtolist("PROD", "CPU_Info")
print(prodCpu)

dmzLocal = findstrtolist("DMZ", "/dev/xvda2")
print(dmzLocal)
dmzLxd = findstrtolist("DMZ", "lxd")
print(dmzLxd)
dmzMemory = findstrtolist("DMZ", "Memory_Usage")
print(dmzMemory)
dmzCpu = findstrtolist("DMZ", "CPU_Info")
print(dmzCpu)

uatLocal = findstrtolist("UAT", "/dev/xvda2")
print(uatLocal)
uatLxd = findstrtolist("UAT", "lxd")
print(uatLxd)
uatShare = findstrtolist("UAT", "shared_uat")
print(uatShare)
uatMemory = findstrtolist("UAT", "Memory_Usage")
print(uatMemory)
uatCpu = findstrtolist("UAT", "CPU_Info")
print(uatCpu)

testLocal = findstrtolist("TEST", "/dev/xvda2")
print(testLocal)
testLxd = findstrtolist("TEST", "lxd")
print(testLxd)
testShare = findstrtolist("TEST", "shared_test")
print(testShare)
testMemory = findstrtolist("TEST", "Memory_Usage")
print(testMemory)
testCpu = findstrtolist("TEST", "CPU_Info")
print(testCpu)


fwLocal = findstrtolist("FW", "/dev/ufsid")
print(fwLocal)
fwMemory = findstrtolist("FW", "Memory_Usage")
print(fwMemory)
fwCpu = findstrtolist("FW", "CPU_Info")
print(fwCpu)


drLocal = findstrtolist("DR", "/dev/xvda2")
print(drLocal)
drLxd = findstrtolist("DR", "lxd_dr")
print(drLxd)
drLxdDmz = findstrtolist("DR", "lxd_dmz_uat_prod")
print(drLxdDmz)
drLxdProd = findstrtolist("DR", "lxd_secure_prod")
print(drLxdProd)
drLxdTest = findstrtolist("DR", "lxd_secure_test")
print(drLxdTest)
drLxdUat = findstrtolist("DR", "lxd_secure_uat")
print(drLxdUat)
drShareProd = findstrtolist("DR", "shared_prod_offsite")
print(drShareProd)
drShareUat = findstrtolist("DR", "shared_uat_offsite")
print(drShareUat)
drShareTest = findstrtolist("DR", "shared_test_offsite")
print(drShareTest)
drMemory = findstrtolist("DR", "Memory_Usage")
print(drMemory)
drCpu = findstrtolist("DR", "CPU_Info")
print(drCpu)


# Define function to convert disk size to Gb
def convertSizetoGb(str):
    if re.match(r'^\d+\.?\d*T$', str):
        s = float(str[:-1]) * 1024
    elif re.match(r'^\d+\.?\d*G$', str):
        s = float(str[:-1])
    elif re.match(r'^\d+\.?\d*M$', str):
        s = float(str[:-1]) / 1024
    elif re.match(r'.+%$', str):
        s = str
    return s


# Create an excel
workbook = xlsxwriter.Workbook("EUDC_Capacity_Report." + today + ".xlsx")

# Create a sheet
worksheet = workbook.add_worksheet()

# Define a format bold 1
bold = workbook.add_format({'bold': 1})

# Define the sheet heading
headings = ['Description', 'IP Address', 'CPU Info', 'Used CPU(%)', 'Free CPU (%)', 'Total Memory(GB)',
            'Used Memory(GB)', 'Free Memory(GB)', 'Disk Name', 'Total Storage(GB)', 'Used Storage(GB)',
            'Free Storage(GB)', 'Used(%)']

# Set Heading format
head_format = workbook.add_format()
head_format.set_border(1)
head_format.set_border_color('#B2B2B2')
head_format.set_bg_color('#FFFFCC')
head_format.set_bold()

# Set Cell format
cell_format = workbook.add_format()
cell_format.set_border(1)
cell_format.set_border_color('#B2B2B2')
cell_format.set_bg_color('#FFFFCC')

# Write data
worksheet.write_row('A1', headings, head_format)

# worksheet.merge_range('A2:A4', 'host-01-prod-eu', cell_format)
# worksheet.merge_range('A5:A6', 'host-01-dmz-eu', cell_format)
# worksheet.merge_range('A7:A9', 'host-01-uat-eu', cell_format)
# worksheet.merge_range('A10:A12', 'host-01-test-eu', cell_format)
# worksheet.write('A13', "pfsense-01-prod-eu")
# worksheet.merge_range('A14:A22', 'host-01-dr-eu', cell_format)

worksheet.write('A2', 'host-01-prod-eu', cell_format)
worksheet.write('A5', 'host-01-dmz-eu', cell_format)
worksheet.write('A7', 'host-01-uat-eu', cell_format)
worksheet.write('A10', 'host-01-test-eu', cell_format)
worksheet.write('A13', "pfsense-01-prod-eu")
worksheet.write('A14', 'host-01-dr-eu', cell_format)


worksheet.write('B2', "10.127.247.113")
worksheet.write('B5', "10.126.56.197")
worksheet.write('B7', "10.127.247.90")
worksheet.write('B10', "10.127.247.98")
worksheet.write('B13', "10.127.247.100")
worksheet.write('B14', "10.135.176.197")

worksheet.write('I2', "prod /dev/xvda2(OS)")
worksheet.write('I3', "prod /mnt/encrypted/lxd.img(CONTAINERS)")
worksheet.write('I4', "prod /mnt/encrypted/shared_prod.img(SHARED NFS)")
worksheet.write('I5', "dmz /dev/xvda2(OS)")
worksheet.write('I6', "dmz /mnt/encrypted/lxd.img(CONTAINERS)")
worksheet.write('I7', "uat /dev/xvda2(OS)")
worksheet.write('I8', "uat /mnt/encrypted/lxd.img(CONTAINERS)")
worksheet.write('I9', "uat /mnt/encrypted/shared_uat.img(SHARED NFS)")
worksheet.write('I10', "test /dev/dmz xvda2(OS)")
worksheet.write('I11', "test /mnt/encrypted/lxd.img(CONTAINERS)")
worksheet.write('I12', "test /mnt/encrypted/shared_test.img(SHARED NFS)")
worksheet.write('I13', "pfsense-01-prod-eu UFS")
worksheet.write('I14', "dr /dev/xvda2(OS)")
worksheet.write('I15', "dr /var/lib/lxd/zfs.img(lxd_dr)(CONTAINERS)")
worksheet.write('I16', "dr /mnt/encrypted1/lxd_dmz_uat_prod.img")
worksheet.write('I17', "dr /mnt/encrypted1/lxd_secure_prod.img")
worksheet.write('I18', "dr /mnt/encrypted1/lxd_secure_test.img")
worksheet.write('I19', "dr /mnt/encrypted1/lxd_secure_uat.img")
worksheet.write('I20', "dr /mnt/encrypted2/shared_prod_offsite.img")
worksheet.write('I21', "dr /mnt/encrypted2/shared_test_offsite.img")
worksheet.write('I22', "dr /mnt/encrypted2/shared_uat_offsite.img")

for i in [1, 2, 3]:
    worksheet.write(1, i + 4, prodMemory[i])
    worksheet.write(4, i + 4, dmzMemory[i])
    worksheet.write(6, i + 4, uatMemory[i])
    worksheet.write(9, i + 4, testMemory[i])
    worksheet.write(12, i + 4, fwMemory[i])
    worksheet.write(13, i + 4,drMemory[i])

worksheet.write(1, 2, prodCpu[1] + " * " + prodCpu[2])
worksheet.write(1, 3, 100-int(prodCpu[3]))
worksheet.write(1, 4, prodCpu[3])

worksheet.write(4, 2, dmzCpu[1] + " * " + dmzCpu[2])
worksheet.write(4, 3, 100-int(dmzCpu[3]))
worksheet.write(4, 4, dmzCpu[3])

worksheet.write(6, 2, uatCpu[1] + " * " + uatCpu[2])
worksheet.write(6, 3, 100-int(uatCpu[3]))
worksheet.write(6, 4, uatCpu[3])

worksheet.write(9, 2, testCpu[1] + " * " + testCpu[2])
worksheet.write(9, 3, 100-int(testCpu[3]))
worksheet.write(9, 4, testCpu[3])

worksheet.write(12, 2, fwCpu[1] + " * " + fwCpu[2])
worksheet.write(12, 3, 100-int(fwCpu[3]))
worksheet.write(12, 4, fwCpu[3])

worksheet.write(13, 2, drCpu[1] + " * " + drCpu[2])
worksheet.write(13, 3, 100-int(drCpu[3]))
worksheet.write(13, 4, drCpu[3])

for i in [1, 2, 3, 4]:
    worksheet.write(1, i+8, convertSizetoGb(prodLocal[i]))
    worksheet.write(2, i+8, convertSizetoGb(prodLxd[i]))
    worksheet.write(3, i+8, convertSizetoGb(prodShare[i]))
    worksheet.write(4, i+8, convertSizetoGb(dmzLocal[i]))
    worksheet.write(5, i+8, convertSizetoGb(dmzLxd[i]))
    worksheet.write(6, i+8, convertSizetoGb(uatLocal[i]))
    worksheet.write(7, i+8, convertSizetoGb(uatLxd[i]))
    worksheet.write(8, i+8, convertSizetoGb(uatShare[i]))
    worksheet.write(9, i+8, convertSizetoGb(testLocal[i]))
    worksheet.write(10, i+8, convertSizetoGb(testLxd[i]))
    worksheet.write(11, i+8, convertSizetoGb(testShare[i]))
    worksheet.write(12, i+8, convertSizetoGb(fwLocal[i]))
    worksheet.write(13, i+8, convertSizetoGb(drLocal[i]))
    worksheet.write(14, i+8, convertSizetoGb(drLxd[i]))
    worksheet.write(15, i+8, convertSizetoGb(drLxdDmz[i]))
    worksheet.write(16, i+8, convertSizetoGb(drLxdProd[i]))
    worksheet.write(17, i+8, convertSizetoGb(drLxdTest[i]))
    worksheet.write(18, i+8, convertSizetoGb(drLxdUat[i]))
    worksheet.write(19, i+8, convertSizetoGb(drShareProd[i]))
    worksheet.write(20, i+8, convertSizetoGb(drShareUat[i]))
    worksheet.write(21, i+8, convertSizetoGb(drShareTest[i]))

# Create a column chart
chart_col = workbook.add_chart({'type': 'column', 'subtype': 'percent_stacked'})

# Add chart series 1
chart_col.add_series(
    {
        'name': '=Sheet1!$K$1',
        'categories': '=Sheet1!$I$2:$I$22',
        'values': '=Sheet1!$K$2:$K$22',
        'fill': {'color': 'red'},
    }
)

# Add chart series 2
chart_col.add_series(
    {
        'name': '=Sheet1!$L$1',
        'categories': '=Sheet1!$I$2:$I$22',
        'values': '=Sheet1!$L$2:$L$22',
        'fill': {'color': 'green'},
    }
)

# Set chart properties and format
chart_col.set_title({'name': 'EU DC Hardware Usage Statistics Report'})
chart_col.set_y_axis({'name': 'Usage %', 'name_font': {'size': 14, 'bold': True}}, )
chart_col.set_size({
    'x_scale': 3.8,
    'y_scale': 2
})

worksheet.set_column('A:M', None, cell_format)

worksheet.conditional_format('A3:H22', {
    'type': 'cell',
    'criteria': '!=',
    'value': -10000,
    'format': cell_format
}

)

# Set column width
worksheet.set_column(0, 0, 19)
worksheet.set_column(1, 1, 14)
worksheet.set_column(2, 2, 47)
worksheet.set_column(3, 4, 12)
worksheet.set_column(5, 7, 17)
worksheet.set_column(8, 8, 40)
worksheet.set_column(9, 11, 17)
worksheet.set_column(12, 12, 8)

# Insert the chart
worksheet.insert_chart('A24', chart_col, {'x_offset': 25, 'y_offset': 10})

# Save and close
workbook.close()
